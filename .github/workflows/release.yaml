name: Build and Deploy Angular with Flutter Module to Firebase

on:
  push:
    branches:
      - master  # Trigger the workflow on pushes to the main branch. Adjust as needed.

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        flutter-version: [3.10.5] # Specify the Flutter version you need

    steps:
      # Step 1: Checkout the Angular repository
      - name: Checkout Angular Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Step 3: Install Angular Dependencies
      - name: Install Angular Dependencies
        run: npm install  # Installs Angular project dependencies as defined in package.json            

      # Step 3: Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ matrix.flutter-version }}

      # Step 4: Clone Wellness Flutter Module
      - name: Clone Wellness Flutter Module
        uses: actions/checkout@v3
        with:
          repository: devnaseem/mbc_wellness.git
          path: mbc_wellness

      # Step 5:  Build Wellness Flutter Web
      - name: Build Wellness Flutter Web
        run: |
          cd mbc_wellness
          flutter pub get
          flutter build web --release -t lib/main_web_entry.dart --web-renderer html
          cd ..   
          
      # Step 6: Clone Gallery Flutter Module
      - name: Clone Gallery Flutter Module
        uses: actions/checkout@v3
        with:
          repository: devnaseem/mbc_gallery.git
          path: mbc_gallery

      # Step 7: Build Gallery Flutter Module
      - name: Build Gallery Flutter Web
        run: |
          cd mbc_gallery
          flutter pub get
          flutter build web --release -t lib/main_web_entry.dart --web-renderer html
          cd ..          

      # Step 7: Prepare Angular Assets Directory
      - name: Prepare Angular Assets Directory
        run: |
          mkdir -p src/assets/flutter/wellness
          mkdir -p src/assets/flutter/gallery
          
      # Step 8: Copy Wellness Flutter Assets
      - name: Copy Wellness Flutter Assets
        run: |
          cp -r mbc_wellness/build/web/* src/assets/flutter/wellness/
          # Exclude flutter.js if already handled          

      # Step 9: Copy Gallery Flutter Assets
      - name: Copy Gallery Flutter Assets
        run: |
          cp -r mbc_gallery/build/web/* src/assets/flutter/gallery/
          # Exclude flutter.js to prevent duplication          

      - name: Copy Shared flutter.js
        run: |
          echo "Copying shared flutter.js..."
          if [ -f mbc_wellness/build/web/flutter.js ]; then
            cp mbc_wellness/build/web/flutter.js src/assets/flutter/
            echo "Copied flutter.js from wellness module."
          else
            echo "flutter.js not found in wellness module."
            exit 1
          fi

          # Remove flutter.js from gallery module to avoid duplication
          if [ -f mbc_gallery/build/web/flutter.js ]; then
            rm mbc_gallery/build/web/flutter.js
            echo "Removed flutter.js from gallery module."
          else
            echo "No flutter.js in gallery_flutter."
          fi


      # Step 11: Clean Up Cloned Repositories (Optional)
      - name: Clean Up Cloned Repositories
        run: |
          rm -rf wellness_flutter
          rm -rf gallery_flutter

      # Step 12: Build Angular Application
      - name: Build Angular App
        run: npx ng build --configuration production

      # Step 12: Install Firebase CLI
      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      # Step 13: Deploy to Firebase Hosting
      - name: Deploy to Firebase
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}  # Accesses the Firebase token from GitHub Secrets
        run: firebase deploy --only hosting --token $FIREBASE_TOKEN
        # '--only hosting' ensures only the hosting service is deployed. Adjust if deploying other services.
